pipeline {
    agent any

    tools {
        maven 'maven'      // Use your Maven tool name from Global Tool Configuration
        jdk 'jdk22'        // Use your JDK tool name from Global Tool Configuration
    }

    parameters {
        choice(name: 'HOST', choices: ['local', 'grid'], description: 'Please choose the host for your test run')
        string(name: 'GIT_PROFILE_URL', defaultValue: '', description: 'Please provide Naukri Gmail')
        string(name: 'LINKEDIN_URL', defaultValue: '', description: 'Please provide Naukri Gmail App password')
        string(name: 'MEDIUM_URL', defaultValue: '', description: 'Please provide Naukri Registered Number')
        choice(name: 'HEADLESS_MODE', choices: ['true', 'false'], description: 'Headless mode selection')
        string(name: 'TAGNAME', defaultValue: '', description: 'Tag name to run the scenario')

        // Git parameters (fix starts here)
        string(name: 'GIT_URL', defaultValue: 'https://github.com/Mrshaik-hub/ApplyMate.git', description: 'Git repository URL')
        string(name: 'GIT_BRANCH', defaultValue: 'main', description: 'Git branch to checkout') // <-- make sure this is correct
    }

    options {
        timestamps()
        skipDefaultCheckout(true)
    }

    environment {
        DOMAIN = ''
    }

    stages {
        stage('Setup Domain') {
            steps {
                script {
                    if (env.GIT_URL && env.GIT_URL.contains('Mate')) {
                        env.DOMAIN = "IS-${params.TAGNAME ?: ''}"
                    }
                }
            }
        }

        stage('Print Tool Versions') {
            steps {
                script {
                    if (isUnix()) {
                        sh 'mvn -v'
                        sh 'java -version'
                    } else {
                        bat 'mvn -v'
                        bat 'java -version'
                    }
                }
            }
        }

         stage('Checkout Code') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: params.GIT_BRANCH]],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [
                        [$class: 'CleanBeforeCheckout'],
                        [$class: 'WipeWorkspace']
                    ],
                    userRemoteConfigs: [[
                        url: 'https://github.com/codewithshaik/SEOHeat.git',
                        credentialsId: 'your_git_credentials'
                    ]]
                ])
            }
        }

        stage('Start in Local or Grid') {
            when { expression { params.host != 'grid' } }
            steps {
                echo 'Skipping BrowserStack setup for local runs (no need)'
            }
        }

        stage('Run SEOHeat Script') {
            steps {
                script {
                    try {
                        echo 'Starting Visa Slot Monitoring Script'
                        if (isUnix()) {
                            sh """
                                mvn clean install \\
                                  -Denvironment=${params.HOST} \\
                                  -DgitProfileUrl=${params['GIT_PROFILE_URL']} \\
                                  -DlinkedInUrl=${params['LINKEDIN_URL']} \\
                                  -DmediumUrl=${params['MEDIUM_URL']} \\
                                  -DHeadlessMode=${params.HEADLESS_MODE} \\
                                  -Dcucumber.filter.tags=${params.TAGNAME}
                            """
                        } else {
                            bat """
                                mvn clean install ^
                                  -Denvironment=${params.HOST} ^
                                  -DgitProfileUrl=${params['GIT_PROFILE_URL']} ^
                                  -DlinkedInUrl=${params['LINKEDIN_URL']} ^
                                  -DmediumUrl=${params['MEDIUM_URL']} ^
                                  -DHeadlessMode=${params.HEADLESS_MODE} ^
                                  -Dcucumber.filter.tags=${params.TAGNAME}
                            """
                        }
                        echo 'SEOHeat Completed'
                    } catch (e) {
                        echo "SEOHeat Failed: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
        }

     stage('Publish Cucumber HTML Report') {
  steps {
    publishHTML(target: [
      reportName: 'Cucumber Report',
      reportDir: 'target/cucumber-html-reports',
      reportFiles: 'overview-features.html',
      keepAll: true,
      alwaysLinkToLastBuild: true,
      allowMissing: false
    ])
  }
}
        stage('Generate and Publish Reports') {
    steps {
        script {
            try {
                def mainReport = 'target/cucumber-html-reports/overview-features.html'
                def failedReport = 'target/cucumber-html-reports/overview-failures.html'

                // Create fallback report if main report doesn't exist
                if (!fileExists(mainReport)) {
                    echo " Report file not found: ${mainReport}"
                    writeFile file: 'summary_report.html', text: """
                        <html><body>
                          <h2>Test Execution Completed</h2>
                          <p>The detailed report was not generated, but tests may have passed.</p>
                          <p>Tag: <b>${params.TAGNAME ?: 'N/A'}</b></p>
                          <p>Environment: <b>${params.NAUKRI_GMAIL ?: 'N/A'}</b></p>
                        </body></html>
                    """
                } else {
                    echo "Found main report at ${mainReport}"
                    def reportHtml = readFile(mainReport)
                    
                    // Safer table extraction with fallback
                    String table = '<p>No test summary table found in report.</p>'
                    try {
                        def matcher = (reportHtml =~ /<table[\s\S]*?<\/table>/)
                        if (matcher.find()) {
                            table = matcher.group(0)
                                .replaceAll('<table\\b[^>]*>', '<table border="1" style="border-collapse:collapse;width:100%">')
                                .replaceAll('<td\\b[^>]*>', '<td style="padding:5px;border:1px solid #ddd">')
                        }
                    } catch (e) {
                        echo " Table formatting failed: ${e.getMessage()}"
                    }

                    // Failure link handling
                    String failureLink = ''
                    if (fileExists(failedReport)) {
                        failureLink = "<p><a href='${env.BUILD_URL}artifact/target/cucumber-html-reports/overview-failures.html'>View Failures</a></p>"
                    }

                    writeFile file: 'summary_report.html', text: """
                        <html><body>
                          <h2>Test Execution Summary</h2>
                          ${params.TAGNAME ? "<p>Tag: <b>${params.TAGNAME}</b></p>" : ""}
                          ${params.NAUKRI_GMAIL ? "<p>Environment: <b>${params.NAUKRI_GMAIL}</b></p>" : ""}
                          ${table}
                          ${failureLink}
                          <p><a href='${env.BUILD_URL}artifact/target/cucumber-html-reports/overview-features.html'>Full Report</a></p>
                        </body></html>
                    """
                }

                // Archive artifacts (won't fail if files are missing)
                archiveArtifacts artifacts: 'summary_report.html', allowMissingArchive: true
                archiveArtifacts artifacts: 'target/cucumber-html-reports/**/*.html', allowMissingArchive: true

                // Publish HTML report with error handling
                try {
                    publishHTML(target: [
                        reportName: 'Cucumber Report',
                        reportDir: 'target/cucumber-html-reports',
                        reportFiles: 'overview-features.html',
                        keepAll: true,
                        allowMissing: true,  // Continue if report is missing
                        alwaysLinkToLastBuild: true
                    ])
                } catch (e) {
                    echo "HTML publishing failed (non-critical): ${e.getMessage()}"
                }

            } catch (err) {
                echo " Report generation error: ${err.getMessage()}"
                // Don't fail the build for reporting issues
                currentBuild.result = currentBuild.result ?: 'SUCCESS'  // Only preserve existing failure status
            }
        }
    }
}
}


   post {
    always {
        script {
            def status = currentBuild.result ?: 'SUCCESS'
            def reportLink = "${env.BUILD_URL}artifact/summary_report.html"
            
            // Build the parameter rows dynamically
            def parameterRows = ""
            def availableParams = [
                'Execution Tag' : params.TAGNAME,
                'Gmail'         : params.GIT_PROFILE_URL,
                'Branch'       : params.GIT_BRANCH,
            ]
            
            availableParams.each { name, value ->
                if (value != null) {
                    parameterRows += """
                        <tr>
                            <th style="text-align:left; padding:8px; background:#f2f2f2; border:1px solid #ddd;">${name}</th>
                            <td style="padding:8px; border:1px solid #ddd;">${value}</td>
                        </tr>
                    """
                }
            }
            
            // Single email with all details
            emailext(
                to: 'shaikmahaboobsubhani0777@gmail.com',
                subject: "SEOHeat - Build #${env.BUILD_NUMBER} | ${status}",
                body: """
                    <html>
                    <head>
                        <style>
                            body { font-family: Arial, sans-serif; line-height: 1.6; }
                            .status-${status.toLowerCase()} { 
                                color: ${status == 'SUCCESS' ? '#4CAF50' : '#F44336'};
                                font-weight: bold;
                            }
                            table { 
                                border-collapse: collapse; 
                                width: 100%; 
                                margin: 15px 0;
                            }
                            th, td { 
                                padding: 8px; 
                                text-align: left; 
                                border: 1px solid #ddd;
                            }
                            th { 
                                background-color: #f2f2f2; 
                            }
                            .footer { 
                                margin-top: 20px; 
                                color: #666; 
                                font-size: 0.9em;
                            }
                        </style>
                    </head>
                    <body>
                        <h2 style="color:#333;">SEOHeat - Execution Summary</h2>
                        
                        <table>
                            <tr>
                                <th style="width:30%;">Build Information</th>
                                <td>#${env.BUILD_NUMBER}</td>
                            </tr>
                            ${parameterRows}
                            <tr>
                                <th>Status</th>
                                <td class="status-${status.toLowerCase()}">${status}</td>
                            </tr>
                        </table>
                        
                        <p><strong>Build URL:</strong> <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                        <p><strong>Detailed Report:</strong> <a href="${reportLink}">Download Report</a></p>
                        
                        <div class="footer">
                            <p>This is an automated notification. Please contact <b>shaik</b> for any queries.</p>
                            <p>Jenkins Automation</p>
                        </div>
                    </body>
                    </html>
                """,
                mimeType: 'text/html',
                attachLog: true,
                compressLog: true
            )
            
            echo "detailed email sent for build #${env.BUILD_NUMBER}"
        
              
            }
        }
    }
}
